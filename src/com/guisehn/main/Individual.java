package com.guisehn.main;

import java.util.Arrays;

public class Individual {
    
    private final MagicSquareFitnessCalculator fitnessCalculator;
    private final int[] square;
    private final int[] parent1;
    private final int[] parent2;
    private final int[] mutationPoints;
    private final String crossoverDetails;
    private boolean belongsToElite;
    private Integer fitness;
    
    public Individual(int[] square, int[] parent1, int[] parent2,
            int[] mutationPoints, String crossoverDetails,
            MagicSquareFitnessCalculator fitnessCalculator) {
        this.square = square;
        this.parent1 = parent1;
        this.parent2 = parent2;
        this.mutationPoints = mutationPoints;
        this.crossoverDetails = crossoverDetails;
        this.fitnessCalculator = fitnessCalculator;
        this.belongsToElite = false;
    }

    public int[] getSquare() {
        return square;
    }

    public int[] getParent1() {
        return parent1;
    }

    public int[] getParent2() {
        return parent2;
    }

    public int[] getMutationPoints() {
        return mutationPoints;
    }
    
    public boolean isMutated() {
        return mutationPoints != null;
    }

    public boolean belongsToElite() {
        return belongsToElite;
    }

    public void setBelongsToElite(boolean belongsToElite) {
        this.belongsToElite = belongsToElite;
    }

    public String getCrossoverDetails() {
        return crossoverDetails;
    }

    public int getFitness() {
        if (fitness == null) {
            fitness = fitnessCalculator.calculateFitness(square, true);
        }

        return fitness;
    }
    
    public String getGenerationDetails(boolean showBelongsToElite) {
        StringBuilder sb = new StringBuilder();
        
        sb.append("1st parent: ").append(parent1 == null ? "(none)" : Arrays.toString(parent1));
        sb.append("\n2nd parent: ").append(parent2 == null ? "(none)" : Arrays.toString(parent2));
        
        if (showBelongsToElite) {
            sb.append("\nElite member: ").append(belongsToElite() ? "yes" : "no");
        }
        
        if (!crossoverDetails.isEmpty()) {
            sb.append("\n").append(crossoverDetails);
        }
        
        sb.append("\nMutated? ");

        if (isMutated()) {
            sb.append("yes, on ").append(Arrays.toString(mutationPoints));
        } else {
            sb.append("no");
        }
        
        return sb.toString();
    }
    
    public String toString(boolean includeFitness) {
        return Arrays.toString(square) +
            (includeFitness ? " - Fitness: " + getFitness() : "");
    }

    @Override
    public String toString() {
        return toString(false);
    }
    
    @Override
    public boolean equals(Object object) {
        if (object instanceof Individual) {
            return object.toString().equals(this.toString());
        }
        
        return false;
    }

    // Generated by NetBeans
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 17 * hash + Arrays.hashCode(this.square);
        return hash;
    }
    
}
