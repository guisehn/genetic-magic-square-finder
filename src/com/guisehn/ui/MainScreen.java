package com.guisehn.ui;

import com.guisehn.main.MagicSquareFinder;
import java.awt.event.ActionEvent;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.Timer;

public class MainScreen extends javax.swing.JFrame {

    private final int LIMIT = 10;    
    private final Chronometer chronometer;
    private final Timer permutationCountTimer;

    private MagicSquareFinder finder;

    public MainScreen() {
        initComponents();
        
        chronometer = new Chronometer((ActionEvent e) -> {
            chronometerLabel.setText(e.getActionCommand());
        });
        
       permutationCountTimer = new Timer(1000, (ActionEvent) -> {
            if (finder != null) {
                //setPermutationCounterLabelText(finder.getPermutationCount());
            }
        });
        
        resultsTextArea.setEditable(false);
        chronometerLabel.setVisible(false);
        permutationCountLabel.setVisible(false);
    }

    private void startChronometer() {
        chronometerLabel.setText("");
        chronometerLabel.setVisible(true);

        chronometer.start();
    }
    
    private void startPermutationCounter() {
        setPermutationCounterLabelText(0);
        permutationCountLabel.setVisible(true);
        
        permutationCountTimer.start();
    }
    
    private void setPermutationCounterLabelText(long count) {
        permutationCountLabel.setText(String.format("%,d", count)
            + " permutações realizadas");
    }
    
    private void startFinder(int size) {
        resultsTextArea.setText("Buscando...");
        
        if (finder != null) {
            // finder.stop();
        }
        
        /*finder = new MagicSquareFinder(size, LIMIT, (ActionEvent e) -> {
            final int eventType = e.getID();
            final String currentText = resultsTextArea.getText();
            String textToAppend = "";
            
            if (eventType == MagicSquareFinder.MAGIC_SQUARE_FOUND_EVENT) {
                String square = e.getActionCommand();
                
                textToAppend = "Matriz " + finder.getAmountOfSquaresFound()
                    + " (permutação #" + finder.getPermutationCount() + ")"
                    + " encontrada aos " + chronometer.getTime()
                    + ":\n" + SquareFormatter.format(square);
            } else if (eventType == MagicSquareFinder.SEARCH_ENDED_EVENT) {
                textToAppend = "Busca finalizada: " + e.getActionCommand()
                    + " matrizes inteligentes encontradas";

                permutationCountTimer.stop();
                chronometer.stop();
                
                setPermutationCounterLabelText(finder.getPermutationCount());
            }
            
            resultsTextArea.setText(currentText + "\n\n" + textToAppend);
        }); */
        
        finder.start();
        startPermutationCounter();
    }
    
    private int getSquareSizeValue() {
        String text = squareSizeTextField.getText();
        return text.matches("[0-9]+") ? Integer.valueOf(text) : -1;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        squareSizeLabel = new javax.swing.JLabel();
        squareSizeTextField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        chronometerLabel = new javax.swing.JLabel();
        permutationCountLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        resultsTextArea.setBorder(null);
        resultsTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(resultsTextArea);

        squareSizeLabel.setText("Tamanho da matriz:");

        startButton.setText("Buscar");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        chronometerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        chronometerLabel.setText("[Chronometer]");

        permutationCountLabel.setText("[Permutation count]");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(squareSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(squareSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(permutationCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chronometerLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(squareSizeLabel)
                    .addComponent(squareSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(permutationCountLabel)
                    .addComponent(chronometerLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        int size = getSquareSizeValue();
        
        if (size <= 0) {
            showMessageDialog(null, "Entre com um valor inteiro e positivo");
            squareSizeTextField.requestFocus();
            return;
        }
        
        startChronometer();
        startFinder(size);
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chronometerLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel permutationCountLabel;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JLabel squareSizeLabel;
    private javax.swing.JTextField squareSizeTextField;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
